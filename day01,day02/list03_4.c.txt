#include <stdio.h>
#include <stdlib.h>

// 연결 리스트의 노드를 정의합니다.
typedef struct NODE {
    int data;           // 노드의 데이터를 저장합니다.
    struct NODE *next;  // 다음 노드를 가리키는 포인터입니다.
} node;

// 노드를 추가하는 함수입니다.
void addNode(node* pnode, int data) {
    // 새로운 노드를 메모리에 할당합니다.
    node* newNode = (node*)malloc(sizeof(node));
    // 메모리 할당이 실패한 경우 오류 메시지를 출력하고 함수를 종료합니다.
    if (newNode == NULL) {
        printf("메모리 할당 오류\n");
        return;
    }
    // 새로운 노드에 데이터를 저장합니다.
    newNode->data = data;
    // 새로운 노드의 다음 노드를 현재 노드의 다음 노드로 설정합니다.
    newNode->next = pnode->next;
    // 현재 노드의 다음 노드를 새로운 노드로 설정합니다.
    pnode->next = newNode;
}

// 리스트의 끝에 노드를 추가하는 함수입니다.
void appendNode(node* head, int data) {
    // 새로운 노드를 메모리에 할당합니다.
    node* newNode = (node*)malloc(sizeof(node));
    // 메모리 할당이 실패한 경우 오류 메시지를 출력하고 함수를 종료합니다.
    if (newNode == NULL) {
        printf("메모리 할당 오류\n");
        return;
    }
    // 새로운 노드에 데이터를 저장합니다.
    newNode->data = data;
    // 새로운 노드의 다음 노드를 NULL로 설정합니다.
    newNode->next = NULL;

    // 현재 노드를 HEAD 노드로 설정합니다.
    node* current = head;
    // 리스트의 끝까지 이동합니다.
    while (current->next != NULL) {
        current = current->next;
    }
    // 새로운 노드를 리스트의 마지막에 추가합니다.
    current->next = newNode;
}

// 연결 리스트의 메모리를 해제하는 함수입니다.
void freeList(node* head) {
    node* current = head;
    node* next;

    // 현재 노드부터 시작하여 모든 노드의 메모리를 해제합니다.
    while (current != NULL) {
        next = current->next; // 다음 노드를 임시로 저장합니다.
        free(current);        // 현재 노드의 메모리를 해제합니다.
        current = next;       // 다음 노드로 이동합니다.
    }
}

// 메인 함수입니다.
void main() {
    // HEAD 노드를 생성하고 초기화합니다.
    node* head = (node*)malloc(sizeof(node));
    head->data = 0; // HEAD에 데이터를 할당합니다.
    head->next = NULL; // HEAD의 다음 노드를 NULL로 설정합니다.

    // 새로운 노드를 추가합니다.
    appendNode(head, 10);
    appendNode(head, 20);
    appendNode(head, 30);
    appendNode(head, 40);
    appendNode(head, 50);

    // 리스트의 각 노드의 데이터를 출력합니다.
    node* curr = head->next;
    while (curr != NULL) {
        printf("현재 Node Data: %d\n", curr->data);
        curr = curr->next;
    }

    // 연결 리스트의 메모리를 삭제합니다.
    freeList(head);

    printf("메모리 삭제완료.\n");
}
