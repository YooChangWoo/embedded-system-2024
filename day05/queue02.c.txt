 /*순차자료구조를 이용한 큐자료구조  */
#include <stdio.h>
#include <stdlib.h>
#define QSIZE 10

// 큐 구조체 정의
typedef struct {
    int front;  // 큐의 시작 인덱스를 가리키는 포인터
    int rear;   // 큐의 끝 인덱스를 가리키는 포인터
    char queue[QSIZE];  // 큐의 데이터를 저장하는 배열
} queue;

// 큐가 꽉 찼는지 확인하는 함수
int isFull(queue* q) {
    return q->rear == QSIZE - 1; // rear가 배열의 마지막 인덱스와 같으면 큐가 꽉 찼음
}

// 큐가 비어있는지 확인하는 함수
int isEmpty(queue* q) {
    return q->rear < q->front; // rear가 front보다 작으면 큐가 비어있음
}

// 큐의 내용을 출력하는 함수
void printQueue(queue* q) {
    if (isEmpty(q)) { // 큐가 비어있는지 확인
        printf("Queue is empty!\n"); // 비어있으면 메시지 출력 후 함수 종료
        return;
    }
    printf("Queue: ");
    for (int i = q->front; i <= q->rear; i++) { // front부터 rear까지 반복하여 큐의 내용 출력
        printf("%c ", q->queue[i]); // 배열 요소 출력
    }
    printf("\n");
}

// 큐에 데이터를 추가하는 함수
void enqueue(queue* q, char ch) {
    if (isFull(q)) { // 큐가 꽉 찼는지 확인
        printf("Queue Overflow!\n"); // 꽉 찼으면 오버플로우 메시지 출력 후 함수 종료
        return;
    }
    q->rear++; // rear 포인터를 증가시켜 데이터 추가할 위치로 이동
    q->queue[q->rear] = ch; // 해당 위치에 데이터 삽입
    printf("ENQUEUE: %c\n", ch); // 삽입한 데이터 출력
}

// 큐에서 데이터를 제거하고 반환하는 함수
char dequeue(queue* q) {
    if (isEmpty(q)) { // 큐가 비어있는지 확인
        printf("Queue Underflow!\n"); // 비어있으면 언더플로우 메시지 출력 후 함수 종료
        return -1;
    }
    char dequeued = q->queue[q->front]; // front가 가리키는 데이터 추출
    q->front++; // front 포인터를 증가시켜 다음 데이터 위치로 이동
    printf("DEQUEUE: %c\n", dequeued); // 추출한 데이터 출력
    return dequeued; // 추출한 데이터 반환
}

// 큐를 생성하고 반환하는 함수
queue* create() {
    queue* q = (queue*)malloc(sizeof(queue)); // 동적 메모리 할당
    if (q == NULL) { // 할당된 메모리가 없는 경우
        printf("Memory allocation failed!\n"); // 메모리 할당 실패 메시지 출력 후 프로그램 종료
        exit(1);
    }
    q->front = 0; // front를 0으로 초기화
    q->rear = -1; // rear를 -1로 초기화
    return q; // 생성된 큐 반환
}

int main() {
    queue* qa = create(); // 큐 생성
    enqueue(qa, 'A'); // 데이터 추가
    printQueue(qa); // 큐 출력
    return 0;
}
/*
구조체 정의:
 queue 구조체는 큐를 나타내며, front와 rear는 각각 큐의 시작과 끝을 가리키는 포인터로 사용됩니다. queue 구조체 안에는 큐의 데이터를 저장하는 배열 queue가 포함되어 있습니다.

isFull() 함수:
 큐가 꽉 찼는지 확인하는 함수입니다. rear가 배열의 마지막 인덱스와 같으면 큐가 꽉 찼다고 판단합니다.

isEmpty() 함수:
큐가 비어있는지 확인하는 함수입니다. rear가 front보다 작으면 큐가 비어있다고 판단합니다.

printQueue() 함수: 
큐의 내용을 출력하는 함수입니다. 큐가 비어있으면 "Queue is empty!" 메시지를 출력하고, 그렇지 않으면 front부터 rear까지 반복하여 큐의 내용을 출력합니다.

enqueue() 함수:
 큐에 데이터를 추가하는 함수입니다. 큐가 꽉 차있으면 "Queue Overflow!" 메시지를 출력하고, 그렇지 않으면 rear를 증가시켜 데이터를 추가합니다.

dequeue() 함수:
 큐에서 데이터를 제거하고 반환하는 함수입니다. 큐가 비어있으면 "Queue Underflow!" 메시지를 출력하고, 그렇지 않으면 front가 가리키는 데이터를 제거하고 반환합니다.

create() 함수:
 큐를 생성하고 반환하는 함수입니다. 동적 메모리 할당을 통해 queue 구조체에 메모리를 할당하고, 초기화한 후에 반환합니다.

메인 함수:
 main() 함수에서는 큐를 생성한 후에 데이터를 추가하고, 그 후에 큐의 내용을 출력합니다.
*/