/* 연결리스트로 구현*/       /stack02
#include <stdio.h>
#define STACK_SZ 10

// 스택 구조체 정의
typedef struct STACK {
    int buf[STACK_SZ]; // 스택의 데이터를 저장할 배열
    int top;           // 스택의 맨 위 요소의 인덱스를 나타내는 변수
} stack;

// 스택이 가득 찼는지 확인하는 함수 (isFull)
int isFull(stack* pskt) {
    return (pskt->top == STACK_SZ - 1); // 스택의 top이 배열의 인덱스 범위와 같으면 가득 찬 상태
}

// 스택이 비어있는지 확인하는 함수 (isEmpty)
int isEmpty(stack* pskt) {
    return (pskt->top == -1); // 스택의 top이 -1이면 비어있는 상태
}

// 스택에 값을 추가하는 함수 (push)
void push(stack* pskt, int value) {
    if (isFull(pskt)) // 스택이 가득 찼는지 확인
        printf("Stack Overflow!\n"); // 스택이 가득 찼으면 오버플로우 메시지 출력
    else
        pskt->buf[++(pskt->top)] = value; // 스택의 top을 증가시키고 해당 위치에 값을 저장
}

// 스택에서 값을 제거하고 반환하는 함수 (pop)
int pop(stack* pstk) {
    if (isEmpty(pstk)) { // 스택이 비어있는지 확인
        printf("Stack Underflow!\n"); // 스택이 비어있으면 언더플로우 메시지 출력
        return -1; // 에러를 나타내는 값 반환
    }
    return pstk->buf[(pstk->top)--]; // 스택의 top을 감소시키고 해당 위치의 값을 반환
}

int main() {
    stack s;

    // 스택에 값 추가
    push(&s, 10);
    push(&s, 20);
    push(&s, 30);

    // 스택에서 값 제거하고 출력
    printf("%d\n", pop(&s));
    printf("%d\n", pop(&s));

    return 0;
}

/*
Stack Overflow와 Stack Underflow 처리:
 스택이 가득 찼을 때와 비어있을 때의 오류 처리를 구현하여 스택의 안정성을 높입니다.

push 함수의 주요 기능:
 push() 함수에서 스택이 가득 찼는지 확인하고, 가득 차지 않았다면 값을 스택에 추가합니다.

pop 함수의 주요 기능: pop() 함수에서 스택이 비어있는지 확인하고,
 비어있지 않다면 가장 최근에 추가된 값을 스택에서 제거하고 반환합니다.
*/

